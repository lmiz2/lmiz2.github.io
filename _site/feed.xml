<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-10-31T17:23:29+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">dokku__’s ⭐Favorites</title><subtitle>즐겨찾기를 옮겨두는 곳</subtitle><author><name>dokku__</name><email>shs3146@gmail.com</email></author><entry><title type="html">[Network]내부망을 가능하게 만드는 NAT와 NAPT의 원리</title><link href="http://localhost:4000/network/1850/" rel="alternate" type="text/html" title="[Network]내부망을 가능하게 만드는 NAT와 NAPT의 원리" /><published>2020-10-24T18:51:00+09:00</published><updated>2020-10-24T18:51:00+09:00</updated><id>http://localhost:4000/network/1850</id><content type="html" xml:base="http://localhost:4000/network/1850/">&lt;p&gt;회사에서 일을 하다 보면, 내부망, 외부망 이라는 단어가 자주 들린다.&lt;/p&gt;

&lt;p&gt;어렴풋이 회사 인트라넷을 구분하는 단어겠거니, 하고 자세한 개념은 모른채 넘어갔었는데,&lt;/p&gt;

&lt;p&gt;문득 하나의 공인 IP로 어떻게 이 많은 컴퓨터들이 인터넷과 연결될까? 하는 궁금증이 생겼고,&lt;/p&gt;

&lt;p&gt;그 답이 NAT(NAPT) 에 있다는것을 알게 되었다.&lt;/p&gt;

&lt;h1 id=&quot;nat-network-address-translation&quot;&gt;NAT (Network Address Translation)&lt;/h1&gt;

&lt;p&gt;Basic NAT, 즉 원래의 NAT는 1개의 공인IP 주소에 N개의 사설(가상) IP주소를 매핑하는 주소변환 기술의 이름이다.&lt;/p&gt;

&lt;p&gt;현재 IPv4의 주소는 전 세계적으로 고갈 상태에 있는데, NAT는 이 고갈되어가는 주소에 대한 효과적인 해결책 중 하나이며, 회사같은 하나의 공동체에서 보안성을 향상시키기 위한 수단으로 활용될수도 있다.&lt;/p&gt;

&lt;p&gt;다음과 같이 여러개의 사설망 IP와, 하나의 공인IP를 할당받은 라우터가 있다고 가정해보자.
&lt;img src=&quot;/assets/img/2020-10-25-232445.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(여기에 쓰인 IP주소는 임의의 주소이며, 이해를 돕기위해 사용되었다.)&lt;/p&gt;

&lt;p&gt;이러한 상황에서 [사설망 클라이언트 1]이 외부 서버에 IPv4 패킷을 전송하게되면, 라우터는 이 패킷의 출발지 IP를 사설망 IP에서 공인IP주소로 변환한 후, 라우팅 테이블에 맵핑 정보를 기록한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-26-223406.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 기록해둔 라우팅 테이블의 정보를 참고하여, 외부 서버(위의 예에서 125.209.222.13)에서 전송되어오는 패킷을 어떤 내부 클라이언트(위의 예에서 10.20.30.1)에게 라우팅 할지 결정하게 된다.&lt;/p&gt;

&lt;p&gt;그런데, 만약 둘 이상의 내부 클라이언트가 같은 외부서버에 접근하게 되면 위와 같은 라우팅 테이블로는 어떤 클라이언트에게 패킷을 라우팅 해야 할 지 알 수가 없게 된다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-29-222531.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[&lt;em&gt;응답 패킷을 받아야 하는 클라이언트는 1인가, 3인가?&lt;/em&gt;]&lt;/p&gt;

&lt;p&gt;이 문제를 해결할 수 있는 대안이 바로 NAPT이다.&lt;/p&gt;

&lt;h1 id=&quot;napt-network-address-port-translation&quot;&gt;NAPT (Network Address Port Translation)&lt;/h1&gt;

&lt;p&gt;NAPT(또는 PAT)에서는 NAT에 Port Forwarding이 추가된 형태이다.&lt;/p&gt;

&lt;p&gt;즉, [내부 클라이언트 IP , 내부 클라이언트 Port , 받을 Port ] 를 저장한다.&lt;/p&gt;

&lt;p&gt;아래 그림을 보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-31-171301.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 라우터는 “받을 Port”를 임의로 지정하여 각 내부망 클라이언트에 맵핑 해 줌으로써,&lt;/p&gt;

&lt;p&gt;외부에서 하나의 공인 IP로 접근하는 여러 패킷들을 각 클라이언트에게 전달 해줄 수 있다.&lt;/p&gt;

&lt;p&gt;이렇게 Port에 따라 다른 목적지로 패킷을 전송하는 것을 Port Forwarding 이라고 하며,&lt;/p&gt;

&lt;p&gt;이 Port Forwarding이 NAT와 NAPT의 차이점이기도 하다.&lt;/p&gt;

&lt;p&gt;현업에서는 대체적으로 NAPT와 NAT를 구분하지 않고 NAT라고 칭한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;이상하거나 잘못된 내용에 대한 태클은 달게 받겠습니다!!&lt;/em&gt;&lt;/p&gt;</content><author><name>dokku__</name><email>shs3146@gmail.com</email></author><category term="Network" /><category term="Network" /><category term="NAT" /><category term="NAPT" /><summary type="html">회사에서 일을 하다 보면, 내부망, 외부망 이라는 단어가 자주 들린다.</summary></entry><entry><title type="html">[java] java와 maven으로 어디에서나 실행가능한 프로그램(exe) 만들기</title><link href="http://localhost:4000/exp/2120/" rel="alternate" type="text/html" title="[java] java와 maven으로 어디에서나 실행가능한 프로그램(exe) 만들기" /><published>2020-09-28T21:22:02+09:00</published><updated>2020-09-28T21:22:02+09:00</updated><id>http://localhost:4000/exp/2120</id><content type="html" xml:base="http://localhost:4000/exp/2120/">&lt;p&gt;개인적인 용도의 유틸리티성 프로그램을 만들다 보면, 문득 자바가 그리워졌다.&lt;/p&gt;

&lt;p&gt;방대한 라이브러리로 인해 개발 생산성이 향상된다는 것이 그 이유인데,&lt;/p&gt;

&lt;p&gt;C와는 달리 자바는 빌드 후 JVM을 이용하여 직접 실행해주어야 하며, 이로 인해 자바를 모르는 사람들은 자바로 만든 유틸리티를 실행하기 쉽지 않다는,&lt;/p&gt;

&lt;p&gt;&lt;u&gt;유틸리티&lt;/u&gt;로써는 매우 치명적인 단점이 있다.&lt;/p&gt;

&lt;p&gt;그러던 중, 우연히 jar파일을 exe로 변환하는 방법을 알게 되어 독립적인 프로그램을 만들기 위해 삽질을 해보았고,&lt;/p&gt;

&lt;p&gt;exe파일에 나의 어플리케이션 코드와  기타 라이브러리를 번들로 컴파일하여 번거로운 실행으로부터 완전히 자유로운 자바 프로그램을 만들게 되어 그 경험을 공유하고자 한다.&lt;/p&gt;

&lt;h1 id=&quot;준비하기&quot;&gt;준비하기&lt;/h1&gt;

&lt;p&gt;우선 필자는 eclipse를 이용하여 maven 으로 jar 파일을 빌드 한 다음, Launch4j라는 툴을 이용하여 jar를 exe파일로 변환하는 식으로 진행하였다.&lt;/p&gt;

&lt;p&gt;이를 위해 java와 ecelipse환경 세팅이 필요하며, Launch4j는 &lt;a href=&quot;https://sourceforge.net/projects/launch4j/files/launch4j-3/&quot;&gt;SorceForge&lt;/a&gt;에서 구할 수 있다.&lt;/p&gt;

&lt;p&gt;SourceForge에서 Download Latest Version 버튼을 눌러 launch4j 설치 파일(20.09.28 기준 버전 3.12)을 다운받아 실행한 후, 안내에 따라 설치한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-09-28-221904.png&quot; alt=&quot;sourceforge&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 다음 자바로 프로그램을 만들기 위해 프로젝트를 생성한 후, 메이븐 프로젝트로 전환해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-09-28-221055.png&quot; alt=&quot;프로젝트를 메이븐 프로젝트로 변경&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 하면 프로젝트 내에 pom.xml 파일이 생기는데, 이는 maven에서 Dependency를 관리하기 위한 파일로, 이는 여기서 다루기엔 너무 큰 주제이니, 기회가 되면 독립적인 주제로 다뤄보겠다.&lt;/p&gt;

&lt;p&gt;pom.xml의 &lt;plugins&gt; 하위에  &quot;maven-assembly-plugin&quot; 이라는 플러그인을 추가해 준다.&lt;/plugins&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-assembly-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.2.1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;  
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;descriptorRefs&amp;gt;&lt;/span&gt;  
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;descriptorRef&amp;gt;&lt;/span&gt;jar-with-dependencies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/descriptorRef&amp;gt;&lt;/span&gt;  
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/descriptorRefs&amp;gt;&lt;/span&gt;  
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;archive&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;manifest&amp;gt;&lt;/span&gt;
              &lt;span class=&quot;nt&quot;&gt;&amp;lt;mainClass&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!--메인 클래스의 path --&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/mainClass&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/archive&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://maven.apache.org/plugins/maven-assembly-plugin/&quot;&gt;maven-assembly-plugin&lt;/a&gt;은 maven 프로젝트의 결과물을 dependency, module, 기타등등의 파일을 단일 아카이브로 만들게 해주는 플러그인이다.&lt;/p&gt;

&lt;p&gt;이를 이용해 우리가 만들 자바 프로젝트를 단일 jar파일로 만들고, 종속 모듈(dependencies)들을 모두 주입하여 하나의 실행파일(Excutable Jar)로 만들어낼것이다.&lt;/p&gt;

&lt;p&gt;참고로, maven-assembly-plugin은 jar 뿐만 아니라 다른 형식도 지원한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;zip&lt;/li&gt;
  &lt;li&gt;tar&lt;/li&gt;
  &lt;li&gt;tar.gz (or tgz)&lt;/li&gt;
  &lt;li&gt;tar.bz2 (or tbz2)&lt;/li&gt;
  &lt;li&gt;tar.snappy&lt;/li&gt;
  &lt;li&gt;tar.xz (or txz)&lt;/li&gt;
  &lt;li&gt;jar&lt;/li&gt;
  &lt;li&gt;dir&lt;/li&gt;
  &lt;li&gt;war&lt;/li&gt;
  &lt;li&gt;and any other format that the ArchiveManager has been configured for&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이외 자세한 사항은 maven document를 참고하자.&lt;/p&gt;

&lt;p&gt;메인 클래스는 말그대로 main메소드가 존재하는 클래스를 칭하며, 패키지경로를 포함하여 기입한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-09-28-223525.png&quot; alt=&quot;프로젝트 구조&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(프로젝트의 구조가 위와 같고, 메인 메소드가 Application.java에 존재할 때, 메인클래스의 패스는 다음과 같은 형식을 띈다.)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;com.convert.prj.Application&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;make-it&quot;&gt;Make It!&lt;/h1&gt;

&lt;p&gt;이제 준비가 끝났다. 이제 원하는 프로그램을 java로 구현하고, 빌드할 차례다.&lt;/p&gt;

&lt;p&gt;여기서는 Apache POI를 이용하여 엑셀 파일을 생성하는 예제를 만들어보겠다.&lt;/p&gt;

&lt;p&gt;우선 POI를 사용하기 위해 pom.xml에 dependency를 추가해준다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;..

  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi-ooxml --&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.poi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;poi-ooxml&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.1.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
	  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- https://mvnrepository.com/artifact/org.apache.poi/poi --&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.poi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;poi&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	    &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.1.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencies&amp;gt;&lt;/span&gt;

..

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://mvnrepository.com/artifact/org.apache.poi/poi&quot;&gt;Apache POI&lt;/a&gt;는 엑셀파일과 관련된 작업을 하기위해 가장 많이 사용되는 라이브러리이다.&lt;/p&gt;

&lt;p&gt;이 라이브러리를 통해 엑셀 파일을 생성/수정하거나, 읽어들여 데이터화 할 수 있다.&lt;/p&gt;

&lt;p&gt;우선, 엑셀 파일을 만드는 간단한 class를 작성한다.&lt;/p&gt;

&lt;p&gt;ExcelMaker.java&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.convert.prj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.poi.xssf.usermodel.XSSFWorkbook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExcelMaker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	

&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;	&lt;span class=&quot;cm&quot;&gt;/**
	 * 
	 * @return Not Saved to disk XSSFWorkbook Object 
	 * @throws IOException
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XSSFWorkbook&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getExcelFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nc&quot;&gt;XSSFWorkbook&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XSSFWorkbook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// do something...&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	
	&lt;span class=&quot;cm&quot;&gt;/**
	 * 
	 * @param wb XSSFWorkbook Object for save
	 * @param path where you save specified path
	 * @return save has successful then true else return false
	 */&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;saveExcelFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;XSSFWorkbook&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;wb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;그리고 main에서, standard input으로 엑셀 파일을 생성할 path를 입력받은 후, ExcelMaker를 호출한다.&lt;/p&gt;

&lt;p&gt;Application.java&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.convert.prj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;		&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Scanner&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Scanner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);){&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;			&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type the path : &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;			&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nextLine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;			&lt;span class=&quot;nc&quot;&gt;ExcelMaker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExcelMaker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;saveExcelFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExcelFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;			&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;​&lt;/span&gt;	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;어플리케이션 작성이 완료되면, 아래와 같이 Maven build를 수행해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-18-223125.png&quot; alt=&quot;maven build 메뉴&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-18-223404.png&quot; alt=&quot;maven build시 Goals&quot; /&gt;&lt;/p&gt;

&lt;p&gt;위와 같이 작성후 Run버튼을 눌러주면, maven이 Project의 target 폴더에 Excutable jar파일을 생성해준다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-18-223713.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이렇게 생성된 Excutable jar 파일은 다른 jar 파일에 비하여 비교적 용량이 큰 것을 볼 수 있는데,&lt;/p&gt;

&lt;p&gt;이는 실행에 필요한 라이브러리까지 모두 jar파일 내부에 포함시켰기 때문이다.&lt;/p&gt;

&lt;p&gt;이 상태에서 java 명령어를 통해 jar파일을 바로 실행할 수도 있지만,&lt;/p&gt;

&lt;p&gt;우리의 목적은 .exe이므로, 아직 가야할 길이 남았다.&lt;/p&gt;

&lt;p&gt;우선 launch4j를 실행한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-18-231216.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;output file에는 원하는 결과물의 경로와 파일명.exe를, jar 에는 우리가 방금 빌드한 Excutable jar 파일의 경로를 명시해준다. (각 칸의 옆에있는 폴더 모양 버튼을 통해 입력할 수도 있다.)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-19-210558.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;그 다음 , Main Class를 명시하는 칸 옆에 폴더모양 버튼을 누르고, 우리가 생성한 Jar를 선택하면, 자동으로 Main Class가 잡힌다.&lt;/p&gt;

&lt;p&gt;이제 모든 과정이 끝났다.&lt;/p&gt;

&lt;p&gt;launch4j 상단의 톱니바퀴 모양의 버튼을 누르고, 설정파일을 저장하면 자동적으로 해당 경로에 결과물.exe파일이 생성된다. 생성된 실행파일을 실행하면…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/2020-10-19-211001.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;매우 잘 실행된다!&lt;/p&gt;

&lt;p&gt;이렇게 우리는 라이브러리까지 모두 포함한 독립된 자바 프로그램을 편리하게 실행할 수 있게 되었다.&lt;/p&gt;

&lt;p&gt;물론 JRE가 설치되어 있어야 한다는 제약사항이 존재하지만, 자바의 막강한 생산성은 그 단점을 커버 해줄수도 있다.&lt;/p&gt;

&lt;p&gt;자바로 웹개발만 해왔다면, 그 웹개발로 쌓은 지식을 이용해 나만의 유틸리티를 만들어보는건 어떨까?&lt;/p&gt;</content><author><name>dokku__</name><email>shs3146@gmail.com</email></author><category term="exp" /><category term="jar to exe" /><category term="java" /><category term="jar" /><category term="maven" /><category term="dependencies" /><category term="launch4j" /><summary type="html">개인적인 용도의 유틸리티성 프로그램을 만들다 보면, 문득 자바가 그리워졌다.</summary></entry></feed>